{"version":3,"sources":["actions/index.js","reducers/favos.js","reducers/index.js","components/parts/Header.js","components/parts/Card.js","components/pages/App.js","serviceWorker.js","index.js"],"names":["readFavos","values","dispatch","a","console","log","ar_qs","tag","push","encodeURI","offset","qs","join","axios","get","response","type","combineReducers","favos","datas","action","raws","data","i","l","length","x","body","JSON","parse","tags","useStyles","makeStyles","theme","formControl","margin","minWidth","color","mapDispatchToProps","connect","props","classes","React","useState","selectValue","setSelectValue","className","root","AppBar","position","Toolbar","Select","value","onChange","event","target","MenuItem","key","_","map","card","marginTop","maxWidth","content","paddingBottom","MyCard","text","Card","CardContent","Typography","variant","component","App","this","readTags","favo","id","txt","title","renderFavos","Component","state","Boolean","window","location","hostname","match","enhancer","applyMiddleware","thunk","store","createStore","reducer","ReactDOM","render","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b761dbed.chunk.js","sourcesContent":["import axios from 'axios'\n//const ROOT_URL = 'https://tw2.lovesaemi.daemon.asia'\n//const ROOT_URL = 'https://localhost:31234'\nconst ROOT_URL = ''\nconst TAGS = 'tags'\nconst FAVOS = 'favos'\nexport const READ_TAGS = \"READ_TAGS\"\nexport const READ_FAVOS = \"READ_FAVOS\"\n\nexport const readFavos = values => async dispatch => {\n    console.log(values)\n    var ar_qs = []\n    if (values.tag) {\n        ar_qs.push(\"tag=\" + encodeURI(values.tag))\n    }\n    if (values.offset) {\n        ar_qs.push(\"offset=\" + values.offset * 10)\n    } else {\n        ar_qs.push(\"offset=0\")\n    }\n    const qs = ar_qs.join(\"&\")\n    const response = await axios.get(`${ROOT_URL}/${FAVOS}?${qs}`)\n    dispatch({\n        type: READ_FAVOS,\n        response\n    })\n}\nexport const readTags = () => async dispatch => {\n    const response = await axios.get(`${ROOT_URL}/${TAGS}`)\n    dispatch({\n        type: READ_TAGS,\n        response\n    })\n}","import {\n    READ_FAVOS,\n    READ_TAGS,\n} from '../actions'\n\nexport default (datas = {}, action) => {\n    switch (action.type) {\n        case READ_FAVOS:\n            //console.log(action.response.data)\n            var raws = action.response.data\n            var favos = []\n            for(var i=0,l=raws.length;i<l;i++){\n                var x = raws[i]\n                x.body = JSON.parse(x.body);\n                favos.push(x)\n            }\n            return { ...datas, favos}\n        case READ_TAGS:\n            //console.log(action.response.data)\n            const tags = action.response.data\n            //console.log(tags)\n            return {...datas, tags }\n        default:\n            return datas\n    }\n}","import {combineReducers} from 'redux'\nimport favos from './favos'\n\n//export default combineReducers({ events ,form: form})\nexport default combineReducers({ favos })","import React from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  readFavos,\n} from '../../actions'\nimport {connect} from 'react-redux'\nimport _ from 'lodash'\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    margin: \"0 auto\",\n    minWidth: \"98%\",\n    color: \"#FFF\"\n  },\n}));\n\nfunction TitleAppBar(props) {\n  const classes = useStyles();\n  const [selectValue,setSelectValue] = React.useState(\"\");\n  const handleChange = event => {\n    setSelectValue(event.target.value);\n    console.log(event.target.value);\n    console.log(props);\n    props.readFavos({tag: event.target.value});\n  };\n  \n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Select\n            value={selectValue}\n            onChange={handleChange}\n            className={classes.formControl}\n          >\n          <MenuItem key=\"::::NULL::::\" value=\"::::NULL::::\">未設定</MenuItem>\n          {\n            _.map(props.tags, tag => (\n              <MenuItem key={tag} value={tag}>{tag}</MenuItem>\n            ))\n          }\n          </Select>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nconst mapDispatchToProps = ({readFavos})\nexport default connect(null,mapDispatchToProps)(TitleAppBar);\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(theme => ({\n  card: {\n    marginTop: '1em',\n    maxWidth: '95%',\n    margin: \"0 auto\",\n  },\n  content: {\n    paddingBottom: \"16px !important\",\n  }\n}));\n\nexport default function MyCard(props) {\n  const classes = useStyles();\n  const text = props.text;\n  return (\n    <Card className={classes.card}>\n      <CardContent className={classes.content}>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          {text}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}","import React from 'react';\nimport TitleAppBar from '../parts/Header'\nimport MyCard from '../parts/Card'\nimport {\n  readFavos,\n  readTags\n} from '../../actions'\nimport {connect} from 'react-redux'\nimport _ from 'lodash'\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.readFavos({})\n    this.props.readTags()\n  }\n\n  renderFavos() {\n    return _.map(this.props.favos.favos, favo => (\n      <MyCard key={favo.id} text={favo.txt}/>\n    ));\n  }\n\n  render () {\n    console.log(this.props.favos)\n    return <div className=\"App\">\n      <TitleAppBar title='A' tags={this.props.favos.tags}/>\n      {\n        this.renderFavos()\n      }\n    </div>\n  }\n}\nconst mapStateToProps = state => ({favos: state.favos})\nconst mapDispatchToProps = ({readTags,readFavos})\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, applyMiddleware} from 'redux'\nimport {Provider} from 'react-redux'\nimport thunk from 'redux-thunk'\nimport reducer from './reducers'\nimport './index.css';\nimport App from './components/pages/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter,Route, Switch} from 'react-router-dom'\n\nconst enhancer = applyMiddleware(thunk)\nconst store = createStore(reducer, enhancer)\n\nReactDOM.render(\n<Provider store={store}>\n<BrowserRouter>\n    <Switch>\n        <Route exact path=\"/\" component={App}></Route>\n        <Route exact path=\"/fav\" component={App}></Route>\n    </Switch>\n</BrowserRouter>\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}